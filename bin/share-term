#!/usr/bin/env node

// Dependencies
var Logger = require("bug-killer")
  , CliResize = require("cli-resize")
  , ShareTerm = require("../lib")
  , OArgv = require("oargv")
  , Open = require("open")
  , Fs = require("fs")
  ;

// Constants
const HOST = "http://localhost:8080/";
//const HOST = "http://share-term.me/";

// Configurations
Logger.config.displayDate = false;
Logger.config.logLevel = 4;

process.stdin.setEncoding("utf8");
process.stdin.setRawMode(true);


// CLI options
switch (process.argv[2]) {
    case "welcome":
        console.log(
            "╭┄┄┄┄┄┄┄┄┄┄┄┄┄┄╮"
        + "\n┊  Share Term  ┊ You are now connected to the remote server."
        + "\n┊  ╌╌╌╌╌╌╌╌╌╌  ┊ Share this link with your friends to see your terminal."
        + "\n┊   Welcome!   ┊ » %sterm?id=%s"
        + "\n╰┄┄┄┄┄┄┄┄┄┄┄┄┄┄╯"
        , process.argv[3], process.argv[4]);
        break;
    case "--help":
    case "-h":
        console.log(Fs.readFileSync(__dirname + "/help", "utf-8"));
        break;
    case "get":
        var CtrlC = require("ctrl-c");
        Logger.log("Connecting to the server.", "info");
        var term = new ShareTerm({ host: HOST });

        // Get terminal
        term.get({ id: process.argv[3] }, function (err) {
            if (err) { return Logger.log(err, "error"); }
            process.exit();
        });

        term.socket.on("_connected", function(){
            Logger.log("You're now connected. Listening for data.", "info");
            if (process.argv.indexOf("--control") !== -1) {
                Logger.log("Requesting remote control.", "info");
                term.socket.emit("requestControl");
            }
        });

        term.socket.on("remoteControlAccepted", function(){
            Logger.log("Remote control accepted.", "info");
            CtrlC(true);
            process.stdin.on("data", function (chunk) {
                term.socket.emit("clientData", chunk);
            });
        });

        // Disconnect
        term.socket.on("disconnect", function(){
            Logger.log("Disconnected by the server.", "error");
            Open(HOST + "support");
            process.exit(1);
        });

        term.socket.on("_termError", function (err) {
            Logger.log(err.toString(), "error");
            Open(HOST + "support");
            process.exit(1);
        });

        term.socket.on("->termClosed", function () {
            Logger.log("Have a nice day!", "info");
            Open(HOST + "support");
            process.exit();
        });
        break;
    default:
        Logger.log("Connecting to the server.", "info");
        var term = new ShareTerm({ host: HOST });

        // Connect
        term.create(function (err, sock) {
            if (err) {
                return Logger.log(err, "error");
            }

            // Welcome message
            term.term.write(" " + OArgv({
                _: ["welcome", HOST, sock.id]
            }, "share-term") + "\r");

            term.term.on("close", function () {
                setTimeout(function() {
                    Logger.log("Have a nice day!", "info");
                    Open(HOST + "support");
                    process.exit();
                }, 100);
            });
        });

        // Disconnect
        term.socket.on("disconnect", function(){
            Logger.log("Disconnected by the server.", "error");
            Open(HOST + "support");
            process.exit(1);
        });

        CliResize(function (err, newSize) {
            term.term.emit("resize", newSize);
        });
        break;
}
